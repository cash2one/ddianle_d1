#ifndef	__GMDATASTRUCT_H__
#define __GMDATASTRUCT_H__

#include <list>
#include <string>
#include "GMDefine.h"
#include "../../socket/ParamPool.h"
#include "../../datastructure/DataStruct_Base.h"

using namespace std;

#ifndef WIN32
typedef long long         __int64;
#endif

class GMAccountInfo
{
public:
    GMAccountInfo();
    ~GMAccountInfo();
public:
    unsigned int GetAccount();
    int GetPriv();
    __int64 GetSession();
    unsigned short GetSlot();
public:
    char m_szName[GM_MAX_NAME_LEN];
    char m_szPasswd[GM_MAX_PASSWD_LEN];
    unsigned int	m_nAccount;
    int				m_nPriv;
    __int64			m_nSessionID;
    unsigned short	m_nSlot;
};


class CGMRoleInfoDB
{
public:
    CGMRoleInfoDB();
    ~CGMRoleInfoDB();
public:
    unsigned int	m_nAccount;
    char			m_szName[GM_MAX_NAME_LEN];
    char			m_szPassword[GM_MAX_PASSWD_LEN];
    __int64			m_nSessionID;
    unsigned short	m_nSlot;
    unsigned int	m_nLastLoginTime;
    list<unsigned int>		m_listPrivs;
    list<string>	m_listGrantedCmds;
    list<string>	m_listDisabledCmds;
    int				m_nPriv;
};


class CGMSysMailLog
{
public:
    CGMSysMailLog();
    ~CGMSysMailLog();
public:
    unsigned int	m_nGMAccount;
    std::string		m_strPUID;
    string			m_strRoleName;
    string			m_strMailTitle;
    string			m_strMailContent;
    itemtype_t  	m_nItemType;
    unsigned short	m_nItemCount;
    unsigned int	m_nValidTime;
    unsigned int	m_nMoney;
    unsigned int	m_nSendTime;
};

class CAnnounceInfo
{
public:
    CAnnounceInfo();
    ~CAnnounceInfo();
public:
    void doEncode(CParamPool & IOBuff);
    void doDecode(CParamPool & IOBuff);
public:
    enum EAnnounceState
    {
        ANNOUNCE_STATE_NOT_PROCESS,
        ANNOUNCE_STATE_PROCESSING,
        ANNOUNCE_STATE_FINISHED,
    };
    unsigned short m_nPID;			// platform id-0 all platform
    std::string m_strContent;
    bool m_bIsAdminChat;
    bool m_bIsSysChat;
    unsigned int m_nStartTime;
    unsigned int m_nEndTime;
    int m_nSendInterval;			// 0 indicate that the annouce only send once

    unsigned int m_nID;				// ID Generated by DB auto_increment
    unsigned int m_nLastSendTime;	// last sendtime
    EAnnounceState m_nState;		// 0-not process, 1-processing 2-finished
};


class QueryLogResult
{
public:
    QueryLogResult();
    void Encode(CParamPool &IOBuff);
    unsigned int m_nLogID;
    std::string m_strGmaAccountName;
    unsigned int m_nOperTime;
    std::string m_strOperParamJson;
};

class QueryLogDb
{
public:
    QueryLogDb(){};
    ~QueryLogDb(){};

    unsigned short m_nSlot;
    EGMActionType logType;
    unsigned int m_nStartTime;
    unsigned int m_nEndTime;

    std::vector<QueryLogResult> m_vecLogs;
};


class QueryLogItemDb
{
public:
    QueryLogItemDb(){};
    ~QueryLogItemDb(){};

    unsigned int m_nLogID;
    unsigned short m_nSlot;
    std::string jsonParam;
};


// gm --> db 传输
class PlayerLockRequestDb
{
public:
    PlayerLockRequestDb();
    ~PlayerLockRequestDb();

public:
    int m_nPid;
    std::string m_strPuid;

    bool m_bIsLocked;
    short m_nLockType;
    short m_nLockReason;
    std::string m_strOperatorName;
};


class PlayerLockedItem
{
public:
    PlayerLockedItem();
    ~PlayerLockedItem();

    bool doDecode(CParamPool &IOBuff);
    bool doEncode(CParamPool &IOBuff);

public:
    unsigned int m_nRoleID;
    unsigned short m_nRoleLevel;
    std::string m_strRoleName;
    unsigned short m_nLockType;
    unsigned short m_nLockReason;
    std::string m_strOperatorName;
    unsigned int m_nLockTime;
};

class PlayerLockQueryDb
{
public:
    PlayerLockQueryDb();
    ~PlayerLockQueryDb();

public:
    int m_nSlot;
    unsigned int m_nStartTime;
    unsigned int m_nEndTime;

    std::list<PlayerLockedItem> m_lstLockItem;
};


class RoleHarassInfo
{
public:
    RoleHarassInfo();
    ~RoleHarassInfo();

    bool doDecode(CParamPool &IOBuff);
    bool doEncode(CParamPool &IOBuff);

public:
    unsigned int m_nRoleID;
    unsigned int m_nRoleLev;
    std::string m_strRoleName;
    unsigned int m_nHarassNum; // 违禁语句条数
    unsigned int m_nLockedTimes; // 被封禁的次数
    bool m_bInited;
};

typedef std::list<RoleHarassInfo> RoleHarassInfoLst;
typedef RoleHarassInfoLst::iterator RoleHarassInfoLstIter;
typedef RoleHarassInfoLst::reverse_iterator RoleHarassInfoLstRIter;
typedef std::map<unsigned int, RoleHarassInfo*> RoleHarassInfoAMap;

class HarassReqDb
{
public:
    HarassReqDb();
    ~HarassReqDb();

public:
    int m_nSlot;
    unsigned int m_nStartTime;
    unsigned int m_nEndTime;

    std::string m_strHarassInfo;

    RoleHarassInfoLst m_lstRoleHarass;
};

class RoleChatInfo
{
public:
    RoleChatInfo();
    ~RoleChatInfo();

    bool doDecode(CParamPool &IOBuff);
    bool doEncode(CParamPool &IOBuff);

public:
    unsigned int m_nChannel; // 聊天平道
    unsigned int m_nChatTime;
    std::string m_strContent;
};

class HarassChatReqDb
{
public:
    HarassChatReqDb();
    ~HarassChatReqDb();
public:

    int m_nSlot;
    unsigned int m_nRoleID;

    unsigned int m_nStartTime;
    unsigned int m_nEndTime;

    std::string m_strHarassChat;

    unsigned int m_nPlatformID;
    std::string m_strPuid;

    std::list<RoleChatInfo> m_lstRoleChatInfo;
};

class DeviceRechargeInfo
{
public:
    DeviceRechargeInfo();
    virtual ~DeviceRechargeInfo();

public:
    void doEncode(CParamPool &IOBuff);

public:
    std::string         m_strDeviceID;
    unsigned int        m_nAccountCount;
    unsigned int        m_nRechargeCount;
    unsigned int        m_nAllAmount;
    bool                m_bForbid;
};

class IosForbidRechargeDB
{
public:
    IosForbidRechargeDB();
    virtual ~IosForbidRechargeDB();

public:
    int                 m_nSlot;
    unsigned int        m_nStartTime;
    unsigned int        m_nEndTime;
    unsigned int        m_nQueryBeginIndex;
    unsigned int        m_nQueryCount;
    std::list<DeviceRechargeInfo>   m_listRecharge;
};

#endif


